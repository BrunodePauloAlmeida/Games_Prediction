library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
detach("package:stats", unload = TRUE)
detach("package:base", unload = TRUE)
library(dplyr)
library(rvest)
detach("package:xml2", unload = TRUE)
library(xml2)
scrape_esportspedia <- function(url) {
pag = url %>%
read_html()
Team_1 = pag %>%
html_nodes("a:nth-child(1) .teamLongTitle") %>%
html_text() %>%
.[seq(from = 1, to = length(.), by = 2)]
Score_1 = pag %>%
html_nodes(".allMatchLists td:nth-child(2)") %>%
html_text() %>%
as.numeric()
Score_2 = pag %>%
html_nodes(".allMatchLists td:nth-child(3)") %>%
html_text() %>%
as.numeric()
Team_2 = pag %>%
html_nodes(".matchlistslot a+ a .teamLongTitle") %>%
html_text() %>%
.[seq(from = 1, to = length(.), by = 2)]
data.frame(Team_1, Score_1, Score_2, Team_2)
}
lck = scrape_esportspedia("https://www.esportspedia.com/lol/LCK_2020_Spring_Split")
library(dplyr)
library(rvest)
scrape_esportspedia <- function(url) {
pag = url %>%
read_html()
Team_1 = pag %>%
html_nodes("a:nth-child(1) .teamLongTitle") %>%
html_text() %>%
.[seq(from = 1, to = length(.), by = 2)]
Score_1 = pag %>%
html_nodes(".allMatchLists td:nth-child(2)") %>%
html_text() %>%
as.numeric()
Score_2 = pag %>%
html_nodes(".allMatchLists td:nth-child(3)") %>%
html_text() %>%
as.numeric()
Team_2 = pag %>%
html_nodes(".matchlistslot a+ a .teamLongTitle") %>%
html_text() %>%
.[seq(from = 1, to = length(.), by = 2)]
data.frame(Team_1, Score_1, Score_2, Team_2)
}
lck = scrape_esportspedia("https://www.esportspedia.com/lol/LCK_2020_Spring_Split")
write.table(lck, file = "lck.csv", sep = ";", na = "", row.names = FALSE)
lck = scrape_esportspedia("https://beta.esportspedia.com/lol/LCK_2020_Spring_Split")
write.table(lck, file = "lck.csv", sep = ";", na = "", row.names = FALSE)
library(dplyr)
library(rvest)
library(stringr)
scrape_esportspedia <- function(url) {
pag = url %>%
read_html()
tab = pag %>%
html_node("#md-table") %>%
html_table(fill = TRUE)
names(tab) = tab[2,]
tab = tab[-which(!is.na(str_extract(tab[,1], "showhide"))),]
tab = tab[-which(!is.na(str_extract(tab[,1], "Team 1"))),]
tab[,1:3] %>%
distinct(.keep_all = TRUE)
}
scrape_esportspedia("https://lol.gamepedia.com/LCK/2020_Season/Spring_Season")
scrape_esportspedia("https://lol.gamepedia.com/CBLOL/2020_Season/Split_1")
cblol_playoffs = scrape_esportspedia("https://lol.gamepedia.com/CBLOL/2020_Season/Split_1_Playoffs")
cblol_playoffs
cblol_fasedegrupos
cblol_fasedegrupos
cblol_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/CBLOL/2020_Season/Split_1")
cblol_fasedegrupos
cblol_fasedegrupos
cblol_fasedegrupos
lec_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/LCS/2020_Season/Spring_Season")
lec_fasedegrupos
lcs_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LCS/2020_Season/Spring_Playoffs")
lcs_playoffs
lck_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LCK/2020_Season/Spring_Playoffs")
lck_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/LCK/2020_Season/Spring_Season")
lck_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LCK/2020_Season/Spring_Playoffs")
write.table(lck_fasedegrupos, file = "lck.csv", sep = ";", na = "", row.names = FALSE)
write.table(lck_fasedegrupos, file = "2020\LCK.csv", sep = ";", na = "", row.names = FALSE)
write.table(lck_fasedegrupos, file = "2020/LCK.csv", sep = ";", na = "", row.names = FALSE)
library(dplyr)
library(rvest)
library(stringr)
scrape_esportspedia <- function(url) {
pag = url %>%
read_html()
tab = pag %>%
html_node("#md-table") %>%
html_table(fill = TRUE)
names(tab) = tab[2,]
tab = tab[-which(!is.na(str_extract(tab[,1], "showhide"))),]
tab = tab[-which(!is.na(str_extract(tab[,1], "Team 1"))),]
tab[,1:3] %>%
distinct(.keep_all = TRUE)
}
lck_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/LCK/2020_Season/Spring_Season")
lck_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LCK/2020_Season/Spring_Playoffs")
write.table(lck_fasedegrupos, file = "2020/LCK_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(lck_playoffs, file = "2020/LCK_po.csv", sep = ";", na = "", row.names = FALSE)
cblol_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/CBLOL/2020_Season/Split_1")
cblol_playoffs = scrape_esportspedia("https://lol.gamepedia.com/CBLOL/2020_Season/Split_1_Playoffs")
write.table(cblol_fasedegrupos, file = "2020/CBLOL_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(cblol_playoffs, file = "2020/CBLOL_po.csv", sep = ";", na = "", row.names = FALSE)
lcs_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/LCS/2020_Season/Spring_Season")
lcs_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LCS/2020_Season/Spring_Playoffs")
write.table(lcs_fasedegrupos, file = "2020/LCS_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(lcs_playoffs, file = "2020/LCS_po.csv", sep = ";", na = "", row.names = FALSE)
lec_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/LEC/2020_Season/Spring_Season")
lec_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LEC/2020_Season/Spring_Playoffs")
write.table(lec_fasedegrupos, file = "2020/LEC_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(lec_playoffs, file = "2020/LEC_po.csv", sep = ";", na = "", row.names = FALSE)
lpl_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/LPL/2020_Season/Spring_Season")
lpl_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LPL/2020_Season/Spring_Playoffs")
write.table(lpl_fasedegrupos, file = "2020/LPL_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(lpl_playoffs, file = "2020/LPL_po.csv", sep = ";", na = "", row.names = FALSE)
lcl_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/LCL/2020_Season/Spring_Season")
lcl_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LCL/2020_Season/Spring_Playoffs")
write.table(lcl_fasedegrupos, file = "2020/LCL_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(lcl_playoffs, file = "2020/LCL_po.csv", sep = ";", na = "", row.names = FALSE)
ljl_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/LJL/2020_Season/Spring_Season")
ljl_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LJL/2020_Season/Spring_Playoffs")
write.table(ljl_fasedegrupos, file = "2020/LJL_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(ljl_playoffs, file = "2020/LJL_po.csv", sep = ";", na = "", row.names = FALSE)
lla_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/LLA/2020_Season/Opening_Playoffs")
lla_playoffs = scrape_esportspedia("https://lol.gamepedia.com/LLA/2020_Season/Opening_Playoffs")
write.table(lla_fasedegrupos, file = "2020/LLA_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(lla_playoffs, file = "2020/LLA_po.csv", sep = ";", na = "", row.names = FALSE)
opl_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/OPL/2020_Season/Split_1")
opl_playoffs = scrape_esportspedia("https://lol.gamepedia.com/OPL/2020_Season/Split_1_Playoffs")
write.table(opl_fasedegrupos, file = "2020/OPL_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(opl_playoffs, file = "2020/OPL_po.csv", sep = ";", na = "", row.names = FALSE)
pcs_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/PCS/2020_Season/Spring_Season")
pcs_playoffs = scrape_esportspedia("https://lol.gamepedia.com/PCS/2020_Season/Spring_Playoffs")
write.table(pcs_fasedegrupos, file = "2020/PCS_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(pcs_playoffs, file = "2020/PCS_po.csv", sep = ";", na = "", row.names = FALSE)
tcl_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/TCL/2020_Season/Winter_Season")
tcl_playoffs = scrape_esportspedia("https://lol.gamepedia.com/TCL/2020_Season/Winter_Playoffs")
write.table(tcl_fasedegrupos, file = "2020/TCL_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(tcl_playoffs, file = "2020/TCL_po.csv", sep = ";", na = "", row.names = FALSE)
vcs_fasedegrupos = scrape_esportspedia("https://lol.gamepedia.com/VCS/2020_Season/Spring_Season")
vcs_playoffs = scrape_esportspedia("https://lol.gamepedia.com/VCS/2020_Season/Spring_Playoffs")
write.table(vcs_fasedegrupos, file = "2020/VCS_fg.csv", sep = ";", na = "", row.names = FALSE)
write.table(vcs_playoffs, file = "2020/VCS_po.csv", sep = ";", na = "", row.names = FALSE)
